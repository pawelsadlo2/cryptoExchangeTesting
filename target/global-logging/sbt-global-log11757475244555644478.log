[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\pawel\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\pawel\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Eclipse Adoptium Java 11.0.14.1)
[debug]       Load.loadUnit: plugins took 136.339101ms
[debug]       Load.loadUnit: defsScala took 0.511301ms
[debug] [Loading] Scanning directory C:\Users\pawel\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\pawel\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 45.4735 ms
[debug]           Load.resolveProject(global-plugins) took 86.118499ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\pawel\.sbt\1.0\plugins, plugins: List(<none>))) took 197.9499ms
[debug] [Loading] Done in C:\Users\pawel\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 234.0209ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7224ms
[debug]     Load.loadUnit(file:/C:/Users/pawel/.sbt/1.0/plugins/, ...) took 384.8921ms
[debug]   Load.apply: load took 660.7411ms
[debug]   Load.apply: resolveProjects took 8.2501ms
[debug]   Load.apply: finalTransforms took 97.7482ms
[debug]   Load.apply: config.delegates took 12.9373ms
[debug]   Load.apply: Def.make(settings)... took 624.523ms
[debug]   Load.apply: structureIndex took 134.0208ms
[debug]   Load.apply: mkStreams took 3.0212ms
[info] loading global plugins from C:\Users\pawel\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3774.844901ms
[debug]           Load.loadUnit: plugins took 27.7247ms
[debug]           Load.loadUnit: defsScala took 0.0058ms
[debug] [Loading] Scanning directory C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting\project
[debug]             Load.loadUnit: mkEval took 10.179401ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9281 ms
[info] loading settings for project cryptoexchangetesting-build from idea.sbt ...
[debug]               Load.resolveProject(cryptoexchangetesting-build) took 3.2833ms
[debug]             Load.loadTransitive: finalizeProject(Project(id cryptoexchangetesting-build, base: C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting\project, plugins: List(<none>))) took 5.8673ms
[debug] [Loading] Done in C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting\project, returning: (cryptoexchangetesting-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2683.9113ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.360201ms
[debug]         Load.loadUnit(file:/C:/Users/pawel/Desktop/SCALA/cryptoExchangeTesting/project/, ...) took 2720.2173ms
[debug]       Load.apply: load took 2721.674601ms
[debug]       Load.apply: resolveProjects took 0.2265ms
[debug]       Load.apply: finalTransforms took 13.1414ms
[debug]       Load.apply: config.delegates took 0.6432ms
[debug]       Load.apply: Def.make(settings)... took 110.3083ms
[debug]       Load.apply: structureIndex took 28.158299ms
[debug]       Load.apply: mkStreams took 0.002401ms
[info] loading project definition from C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5880.0398ms
[debug]     Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting
[debug]       Load.loadUnit: mkEval took 0.392401ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7227 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 43.042799ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting, plugins: List(<none>))) took 46.444199ms
[debug] [Loading] Done in C:\Users\pawel\Desktop\SCALA\cryptoExchangeTesting, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1859.954499ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.4066ms
[debug]   Load.loadUnit(file:/C:/Users/pawel/Desktop/SCALA/cryptoExchangeTesting/, ...) took 7752.1535ms
[debug] Load.apply: load took 7753.674401ms
[debug] Load.apply: resolveProjects took 0.131599ms
[debug] Load.apply: finalTransforms took 28.644699ms
[debug] Load.apply: config.delegates took 0.3164ms
[debug] Load.apply: Def.make(settings)... took 79.4645ms
[debug] Load.apply: structureIndex took 27.0358ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to cryptoExchangeTesting (in build file:/C:/Users/pawel/Desktop/SCALA/cryptoExchangeTesting/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50008 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50008, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to cryptoExchangeTesting (in build file:/C:/Users/pawel/Desktop/SCALA/cryptoExchangeTesting/)
[debug] > Exec(idea-shell, None, None)
