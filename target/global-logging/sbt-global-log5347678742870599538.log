[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\pawel.sadlo\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\pawel.sadlo\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 11.0.2)
[debug]       Load.loadUnit: plugins took 112.4066ms
[debug]       Load.loadUnit: defsScala took 0.3143ms
[debug] [Loading] Scanning directory C:\Users\pawel.sadlo\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\pawel.sadlo\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.9321 ms
[debug]           Load.resolveProject(global-plugins) took 55.1059ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\pawel.sadlo\.sbt\1.0\plugins, plugins: List(<none>))) took 122.5838ms
[debug] [Loading] Done in C:\Users\pawel.sadlo\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 144.295ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2865ms
[debug]     Load.loadUnit(file:/C:/Users/pawel.sadlo/.sbt/1.0/plugins/, ...) took 266.6333ms
[debug]   Load.apply: load took 488.1601ms
[debug]   Load.apply: resolveProjects took 7.6912ms
[debug]   Load.apply: finalTransforms took 75.937ms
[debug]   Load.apply: config.delegates took 12.7598ms
[debug]   Load.apply: Def.make(settings)... took 606.2639ms
[debug]   Load.apply: structureIndex took 109.0944ms
[debug]   Load.apply: mkStreams took 1.929ms
[info] loading global plugins from C:\Users\pawel.sadlo\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6242.5911ms
[debug]           Load.loadUnit: plugins took 36.0001ms
[debug]           Load.loadUnit: defsScala took 0.0038ms
[debug] [Loading] Scanning directory C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting\project
[debug]             Load.loadUnit: mkEval took 9.639ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0439 ms
[info] loading settings for project cryptoexchangetesting-build from idea.sbt ...
[debug]               Load.resolveProject(cryptoexchangetesting-build) took 3.1401ms
[debug]             Load.loadTransitive: finalizeProject(Project(id cryptoexchangetesting-build, base: C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting\project, plugins: List(<none>))) took 5.7355ms
[debug] [Loading] Done in C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting\project, returning: (cryptoexchangetesting-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2688.8741ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.9849ms
[debug]         Load.loadUnit(file:/C:/Users/pawel.sadlo/Desktop/PROJECTS/cryptoExchangeTesting/project/, ...) took 2731.1145ms
[debug]       Load.apply: load took 2732.7499ms
[debug]       Load.apply: resolveProjects took 0.0974ms
[debug]       Load.apply: finalTransforms took 9.3554ms
[debug]       Load.apply: config.delegates took 0.4033ms
[debug]       Load.apply: Def.make(settings)... took 86.0098ms
[debug]       Load.apply: structureIndex took 33.7087ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4396.2088ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting
[debug]       Load.loadUnit: mkEval took 0.2982ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5832 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 31.6516ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting, plugins: List(<none>))) took 36.0221ms
[debug] [Loading] Done in C:\Users\pawel.sadlo\Desktop\PROJECTS\cryptoExchangeTesting, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2330.4137ms
[debug]     Load.loadUnit: cleanEvalClasses took 18.7979ms
[debug]   Load.loadUnit(file:/C:/Users/pawel.sadlo/Desktop/PROJECTS/cryptoExchangeTesting/, ...) took 6746.4827ms
[debug] Load.apply: load took 6748.5205ms
[debug] Load.apply: resolveProjects took 0.1432ms
[debug] Load.apply: finalTransforms took 28.1233ms
[debug] Load.apply: config.delegates took 0.2998ms
[debug] Load.apply: Def.make(settings)... took 80.2512ms
[debug] Load.apply: structureIndex took 25.462ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to cryptoExchangeTesting (in build file:/C:/Users/pawel.sadlo/Desktop/PROJECTS/cryptoExchangeTesting/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64852 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64852, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to cryptoExchangeTesting (in build file:/C:/Users/pawel.sadlo/Desktop/PROJECTS/cryptoExchangeTesting/)
[debug] > Exec(idea-shell, None, None)
